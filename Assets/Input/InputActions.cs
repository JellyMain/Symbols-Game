//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Typewriter"",
            ""id"": ""d8165cd8-9362-41bd-b50f-97972bfd0895"",
            ""actions"": [
                {
                    ""name"": ""BackspacePressed"",
                    ""type"": ""Button"",
                    ""id"": ""04c505db-57c5-461e-89eb-cde34770bcef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackspaceHold"",
                    ""type"": ""Button"",
                    ""id"": ""eb7502d8-0ad7-48b1-9bc8-0d96c64196a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterPressed"",
                    ""type"": ""Button"",
                    ""id"": ""93fba903-7a4c-4254-a4c3-d6a237e96e2e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrowPressed"",
                    ""type"": ""Button"",
                    ""id"": ""aeb1beca-12bd-4da9-ba04-5d344108b955"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrowPressed"",
                    ""type"": ""Button"",
                    ""id"": ""8ae04feb-8fe7-4b94-942a-d96ff6f2f3ce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EscapePressed"",
                    ""type"": ""Button"",
                    ""id"": ""c3786940-df62-4b2b-b6f2-5733895e25a4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""622a0e5f-012b-4dee-be8a-128dde740d44"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackspacePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4e103d8-d63c-47fa-8dbe-a6dfa7394e70"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackspaceHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1e2820d-359f-42ff-8813-60399dcbc0b4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65b1b9b2-4cf0-4ac0-bf7e-3d9c4c8b4ad2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrowPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c435dcb-c446-48ed-adb2-c20d701bf36b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrowPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c174124-ff4b-47d5-b996-57a3edbd7e25"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscapePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Typewriter
        m_Typewriter = asset.FindActionMap("Typewriter", throwIfNotFound: true);
        m_Typewriter_BackspacePressed = m_Typewriter.FindAction("BackspacePressed", throwIfNotFound: true);
        m_Typewriter_BackspaceHold = m_Typewriter.FindAction("BackspaceHold", throwIfNotFound: true);
        m_Typewriter_EnterPressed = m_Typewriter.FindAction("EnterPressed", throwIfNotFound: true);
        m_Typewriter_RightArrowPressed = m_Typewriter.FindAction("RightArrowPressed", throwIfNotFound: true);
        m_Typewriter_LeftArrowPressed = m_Typewriter.FindAction("LeftArrowPressed", throwIfNotFound: true);
        m_Typewriter_EscapePressed = m_Typewriter.FindAction("EscapePressed", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Typewriter.enabled, "This will cause a leak and performance issues, InputActions.Typewriter.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Typewriter
    private readonly InputActionMap m_Typewriter;
    private List<ITypewriterActions> m_TypewriterActionsCallbackInterfaces = new List<ITypewriterActions>();
    private readonly InputAction m_Typewriter_BackspacePressed;
    private readonly InputAction m_Typewriter_BackspaceHold;
    private readonly InputAction m_Typewriter_EnterPressed;
    private readonly InputAction m_Typewriter_RightArrowPressed;
    private readonly InputAction m_Typewriter_LeftArrowPressed;
    private readonly InputAction m_Typewriter_EscapePressed;
    public struct TypewriterActions
    {
        private @InputActions m_Wrapper;
        public TypewriterActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackspacePressed => m_Wrapper.m_Typewriter_BackspacePressed;
        public InputAction @BackspaceHold => m_Wrapper.m_Typewriter_BackspaceHold;
        public InputAction @EnterPressed => m_Wrapper.m_Typewriter_EnterPressed;
        public InputAction @RightArrowPressed => m_Wrapper.m_Typewriter_RightArrowPressed;
        public InputAction @LeftArrowPressed => m_Wrapper.m_Typewriter_LeftArrowPressed;
        public InputAction @EscapePressed => m_Wrapper.m_Typewriter_EscapePressed;
        public InputActionMap Get() { return m_Wrapper.m_Typewriter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TypewriterActions set) { return set.Get(); }
        public void AddCallbacks(ITypewriterActions instance)
        {
            if (instance == null || m_Wrapper.m_TypewriterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TypewriterActionsCallbackInterfaces.Add(instance);
            @BackspacePressed.started += instance.OnBackspacePressed;
            @BackspacePressed.performed += instance.OnBackspacePressed;
            @BackspacePressed.canceled += instance.OnBackspacePressed;
            @BackspaceHold.started += instance.OnBackspaceHold;
            @BackspaceHold.performed += instance.OnBackspaceHold;
            @BackspaceHold.canceled += instance.OnBackspaceHold;
            @EnterPressed.started += instance.OnEnterPressed;
            @EnterPressed.performed += instance.OnEnterPressed;
            @EnterPressed.canceled += instance.OnEnterPressed;
            @RightArrowPressed.started += instance.OnRightArrowPressed;
            @RightArrowPressed.performed += instance.OnRightArrowPressed;
            @RightArrowPressed.canceled += instance.OnRightArrowPressed;
            @LeftArrowPressed.started += instance.OnLeftArrowPressed;
            @LeftArrowPressed.performed += instance.OnLeftArrowPressed;
            @LeftArrowPressed.canceled += instance.OnLeftArrowPressed;
            @EscapePressed.started += instance.OnEscapePressed;
            @EscapePressed.performed += instance.OnEscapePressed;
            @EscapePressed.canceled += instance.OnEscapePressed;
        }

        private void UnregisterCallbacks(ITypewriterActions instance)
        {
            @BackspacePressed.started -= instance.OnBackspacePressed;
            @BackspacePressed.performed -= instance.OnBackspacePressed;
            @BackspacePressed.canceled -= instance.OnBackspacePressed;
            @BackspaceHold.started -= instance.OnBackspaceHold;
            @BackspaceHold.performed -= instance.OnBackspaceHold;
            @BackspaceHold.canceled -= instance.OnBackspaceHold;
            @EnterPressed.started -= instance.OnEnterPressed;
            @EnterPressed.performed -= instance.OnEnterPressed;
            @EnterPressed.canceled -= instance.OnEnterPressed;
            @RightArrowPressed.started -= instance.OnRightArrowPressed;
            @RightArrowPressed.performed -= instance.OnRightArrowPressed;
            @RightArrowPressed.canceled -= instance.OnRightArrowPressed;
            @LeftArrowPressed.started -= instance.OnLeftArrowPressed;
            @LeftArrowPressed.performed -= instance.OnLeftArrowPressed;
            @LeftArrowPressed.canceled -= instance.OnLeftArrowPressed;
            @EscapePressed.started -= instance.OnEscapePressed;
            @EscapePressed.performed -= instance.OnEscapePressed;
            @EscapePressed.canceled -= instance.OnEscapePressed;
        }

        public void RemoveCallbacks(ITypewriterActions instance)
        {
            if (m_Wrapper.m_TypewriterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITypewriterActions instance)
        {
            foreach (var item in m_Wrapper.m_TypewriterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TypewriterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TypewriterActions @Typewriter => new TypewriterActions(this);
    public interface ITypewriterActions
    {
        void OnBackspacePressed(InputAction.CallbackContext context);
        void OnBackspaceHold(InputAction.CallbackContext context);
        void OnEnterPressed(InputAction.CallbackContext context);
        void OnRightArrowPressed(InputAction.CallbackContext context);
        void OnLeftArrowPressed(InputAction.CallbackContext context);
        void OnEscapePressed(InputAction.CallbackContext context);
    }
}
